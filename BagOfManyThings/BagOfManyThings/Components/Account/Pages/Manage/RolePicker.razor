@page "/Account/Manage/RolePicker"
@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using BagOfManyThings.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject RoleManager<IdentityRole> RoleManager



<PageTitle>Role Picker</PageTitle>



<div class="row">
    <div class="col-md-4">
<AuthorizeView>
    <Authorized>
<h1>Choose Your Role</h1>
<div>
            <button class="btn btn-primary" @onclick="AssignPlayer">Player</button>
            <button class="btn btn-primary" @onclick="AssignDM">Dungeon Master</button>
</div>

<h2>Available Roles</h2>
                <ul>
                    @foreach (var role in roles)
                    {
                        <li>@role.Name</li>
                    }
                </ul>
    </Authorized>
    <NotAuthorized>
        <div>
        <h1>
            Please log into your account.
        </h1>
        </div>
    </NotAuthorized>
</AuthorizeView>
</div>
</div>

@code {
    [Inject]
    private AuthenticationStateProvider AuthenticationState { get; set; }

    IList<IdentityRole> roles;

    private ApplicationUser user = default!;

    protected override async Task OnInitializedAsync()
    {
        //put roles into the roles IList
        var authState = await AuthenticationState.GetAuthenticationStateAsync();
        var authUser = authState.User;
        user = await UserManager.GetUserAsync(authUser);

        if (user == null)
        {
            Logger.LogInformation("User is null.");
            return; // Or handle the null user case appropriately
        }
     }
    
    public async Task AssignPlayer()
    {
        var result = await UserManager.AddToRoleAsync(user, "Player"); // Assign the role
        if (!result.Succeeded)
        {
            Logger.LogInformation("Failed to assign Player role.");
            return;
        }
  
                    Logger.LogInformation("Assigned Player role.");
            // signing in the user again to update their claims
            await SignInManager.RefreshSignInAsync(user);

            NavigationManager.NavigateTo("/");//change this to Player specific website
        
    }
    public async Task AssignDM()
    {
        var result = await UserManager.AddToRoleAsync(user, "DM"); // Assign the role
        if(!result.Succeeded)
        {
            Logger.LogInformation("Failed to assign DM role.");
            return;
        }
      
        Logger.LogInformation("Assigned DM role.");

        // signing in the user again to update their claims
        await SignInManager.RefreshSignInAsync(user);
        NavigationManager.NavigateTo("/GameBoard");//change this to DM specific website
        
        }
}