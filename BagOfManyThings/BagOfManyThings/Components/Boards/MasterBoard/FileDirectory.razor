@page "/Boards/MasterBoard/FileDirectory"
@rendermode InteractiveServer

@using System.IO
@using BagOfManyThings.Components.Account
@using BagOfManyThings.Data
@using Microsoft.AspNetCore.Identity
@using BagOfManyThings.Components.UIComponents

@inject FileService FileSystem
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager NavigationManager


<PageTitle>File System - Directory</PageTitle>

<h3>Campaign Content</h3>

<button class="btn btn-info btn-lg" title="Markdown Sheet Button" @onclick="() => MarkdownSheetClick() ">
    ?
</button>

<Confirm @ref="MarkdownSheet" ConfirmationChanged="ConfirmMarkdownSheetClick"
         ConfirmationMessage="Do you understand how to use Markdown?"
ConfirmationTitle="Markdown Sheet"
ConfirmationButton="Open Full Sheet">
</Confirm>

<AuthorizeView>
    <NotAuthorized>
        <h1 class="text-danger">Access denied</h1>
        <p class="text-danger">Please log into your account.</p>
    </NotAuthorized>
    <Authorized>
        @if (basePath != null)
        {
            <div class="directory-explorer">
                <BagOfManyThings.Components.UIComponents.DataVisualization.FolderTree folderPath=@basePath/>
            </div>
        }
        else
        {
            <button class="btn btn-primary" @onclick="CreateUserCampaign">Create Campaign Folder</button>
        }
    </Authorized>
    <Authorizing>
        <p>Loading your board...</p>
    </Authorizing>
</AuthorizeView>

@code {

    private ApplicationUser user = default!;
    private string? UserId;
    private string? basePath;
    ConfirmBase MarkdownSheet { get; set; }


    private void MarkdownSheetClick()
    {
        MarkdownSheet.Show();
    }
    private void ConfirmMarkdownSheetClick(bool ConfirmClick)
    {
        if(ConfirmClick)
        {
            NavigationManager.NavigateTo("Boards/MarkdownSheet");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authestate = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = (authestate).User;
        UserId = user.Claims.FirstOrDefault().Value;
        basePath = FileSystem.GetUserDirectoryPath(UserId);
    }

    private void CreateUserCampaign()
    {
         FileSystem.CreateUserDirectory(UserId);
         NavigationManager.NavigateTo("/Boards/MasterBoard/FileDirectory");
    }
}