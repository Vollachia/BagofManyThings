
@using System.IO
@using BagOfManyThings.Components.Boards
@using BagOfManyThings.Components.UIComponents
@using Markdig

@inject NavigationManager NavigationManager
@inject FileService FileSystem

<Confirm @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDeleteClick"
         ConfirmationMessage=@($"Are you sure you want to delete \"{Path.GetFileName(basePath)}\"")>
</Confirm>
<Confirm @ref="CreateItemConfirmation" ConfirmationChanged="ConfirmCreateClick"
    ConfirmationMessage=@("Please name your item:")>
<
</Confirm>
<div>
    <div>
        @if (Directory.Exists(basePath))
        {
            <div class="item-div">
                📁@Path.GetFileName(basePath);
            <button class="btn btn-danger btn-sm" title="Delete" @onclick="() => DeleteClick() ">
                ❌
                </button>
                <button class="btn btn-success btn-sm" title="Add New File" @onclick="() => CreateClick()">
                ➕🗒
            </button>
            <button class="btn btn-success btn-sm" title="Add New Folder" @onclick="() => FileSystem.CreateFolderInDirectory(basePath, NewFolderName)">
                ➕📁
            </button>
            </div>
            <ul style="list-style-type:none;">
                @foreach (var item in Directory.EnumerateFileSystemEntries(basePath))
                {
                    <li style="list-style-type:none;">
                        @if (File.Exists(item)) 
                        {

                            <div class="item-div">
                                🗒@Path.GetFileNameWithoutExtension(item);
                                <button class="btn btn-sm btn-danger" title="Delete" @onclick="() => DeleteClick()">
                                    ❌
                                </button>
                                <button class="btn btn-sm btn-warning" title="Edit" @onclick="() => EditFile(item)">
                                    ✎
                                </button>
                                <button class="btn btn-sm btn-info" title="Read" @onclick="() => ReadFile(item)">
                                    📜
                                </button>
                            </div>
                            <div>
                                @if (selectedFile != null)
                                {
                                    <div class="directory-edit-box">
                                        <textarea class="form-control" @bind="fileContent"></textarea>
                                        <button class="btn btn-primary" @onclick="SaveFile">🖫</button>
                                    </div>
                                }

                                @if (showPreview && fileContent != null)
                                {
                                    <div class="directory-read-box">
                                        @((MarkupString)Markdown.ToHtml(fileContent))
                                    </div>
                                }
                            </div>

                        }
                        else if (Directory.Exists(item))
                        {
                            <FileTree basePath="@item"/>
                        }
                    </li>
                }
            </ul>
        }
    </div>
</div>



@code {


    [Parameter]
    public string? basePath { get; set; }

    private string newItemName = "Untitled";
    private ConfirmBase DeleteConfirmation { get; set; }
    private ConfirmBase CreateItemConfirmation { get; set; }
    private ConfirmBase CreateFolderConfirmation { get; set; }
    private string? selectedFile;
    private string? fileContent;
    private bool showPreview = false; 



    private void DeleteClick()
    {
        DeleteConfirmation.Show();
    }
    private void ConfirmDeleteClick(bool deleteConfirmed)
    {
        if(deleteConfirmed)
        {
            if (Directory.Exists(basePath))
                FileSystem.DeleteDirectory(basePath);
            else if(File.Exists(basePath))
                File.Delete(basePath);
            NavigationManager.Refresh(true);
        }
    }

    private void EditFile(string filePath)
    {
        selectedFile = filePath;
        fileContent = File.ReadAllText(filePath);
    }

    private void ReadFile(string filePath)
    {
        fileContent = File.ReadAllText(filePath);
        if(fileContent!=null)
            showPreview = !showPreview;//toggle
    }
    private void SaveFile()
    {
        if (selectedFile == null)
            return;
        File.WriteAllText(selectedFile, fileContent);
        selectedFile = null;

    }
    private void CreateItemClick()
    {
        CreateItemConfirmation.Show();
    }
    private void ConfirmCreateClick(bool CreateItemConfirmed)
    {
        if(CreateItemConfirmed)
        {
            FileSystem.CreateMarkdownFileAsync(basePath, newItemName);
        }
    }
    private void ConfirmCreateFolderClick(bool CreateFolderConfirmed)
    {
        if()
    }


}